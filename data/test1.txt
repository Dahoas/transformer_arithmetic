x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , vis = True
def __floordiv__(x, y, vis=True):
assert y != O
res = copy(O)
res = Val: , Int:  0
while x >= y:
factor_mag = O
factor_mag = Val: , Int:  0
while (y << factor_mag) <= x:
factor_mag = factor_mag + I
x = Val: , Int:  0 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , res = Val: , Int:  0 , factor_mag = Val:  1 , Int:  1
while (y << factor_mag) <= x:
factor_mag = factor_mag + I
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , res = Val: , Int:  0 , factor_mag = Val:  2 , Int:  2
while (y << factor_mag) <= x:
factor_mag = factor_mag + I
x = Val:  2 , Int:  2 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , res = Val: , Int:  0 , factor_mag = Val:  3 , Int:  3
while (y << factor_mag) <= x:
factor_mag = factor_mag - I
x = Val:  3 , Int:  3 , y = Val:  1 , Int:  1
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , res = Val: , Int:  0 , factor_mag = Val:  2 , Int:  2
dig = I
dig = Val:  1 , Int:  1
sum_div = y
sum_div = Val:  1 2 , Int:  1 2
while (sum_div + y) << factor_mag <= x:
x = Val:  1 2 , Int:  1 2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  2 , Int:  2
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  1 , Int:  1
y = y.drop()
y = Val:  1 , Int:  1
ds = digx + digy
x = Val:  2 , Int:  2 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
ds = ds + carry
x = Val:  4 , Int:  4 , y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
res = ds[O] | res
res = Val:  4 , Int:  4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  1 , Int:  1
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , y = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
ds = ds + carry
x = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
res = ds[O] | res
res = Val:  2 4 , Int:  2 4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  2 4 , Int:  2 4
return res
return res
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , res = Val: , Int:  0 , factor_mag = Val:  2 , Int:  2 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2
factor = dig << factor_mag
factor = Val:  1 0 0 , Int:  1 0 0
res = res + factor
x = Val: , Int:  0 , y = Val:  1 0 0 , Int:  1 0 0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val: , Int:  0
digy = y[O]
digy = Val:  0 , Int:  0
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val:  1 0 , Int:  1 0
ds = digx + digy
y = Val:  0 , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
y = Val:  1 0 , Int:  1 0 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  0 , Int:  0 , ds = Val:  0 , Int:  0
ds = ds + carry
y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
y = Val:  1 0 , Int:  1 0 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  0 , Int:  0 , ds = Val:  0 , Int:  0
res = ds[O] | res
res = Val:  0 , Int:  0
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val: , Int:  0
digy = y[O]
digy = Val:  0 , Int:  0
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val:  1 , Int:  1
ds = digx + digy
y = Val:  0 , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
y = Val:  1 , Int:  1 , res = Val:  0 , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  0 , Int:  0 , ds = Val:  0 , Int:  0
ds = ds + carry
y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
y = Val:  1 , Int:  1 , res = Val:  0 , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  0 , Int:  0 , ds = Val:  0 , Int:  0
res = ds[O] | res
res = Val:  0 0 , Int:  0
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val: , Int:  0
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
y = Val: , Int:  0 , res = Val:  0 0 , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  1 , Int:  1 , ds = Val:  1 , Int:  1
ds = ds + carry
x = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  0 0 , Int:  0 , carry = Val: , Int:  0 , digx = Val: , Int:  0 , digy = Val:  1 , Int:  1 , ds = Val:  1 , Int:  1
res = ds[O] | res
res = Val:  1 0 0 , Int:  1 0 0
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  1 0 0 , Int:  1 0 0
return res
return res
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 , Int:  1 2 , factor_mag = Val:  2 , Int:  2 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
x = x - (sum_div << factor_mag)
x = Val:  1 2 3 4 , Int:  1 2 3 4 , y = Val:  1 2 0 0 , Int:  1 2 0 0
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
res = copy(O)
res = Val: , Int:  0
borrow = copy(O)
borrow = Val: , Int:  0
while y != O:
digx = x[O]
digx = Val:  4 , Int:  4
digy = y[O]
digy = Val:  0 , Int:  0
x = x.drop()
x = Val:  1 2 3 , Int:  1 2 3
y = y.drop()
y = Val:  1 2 0 , Int:  1 2 0
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  4 , Int:  4 , y = Val:  0 , Int:  0
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  1 2 3 , Int:  1 2 3 , y = Val:  1 2 0 , Int:  1 2 0 , res = Val: , Int:  0 , borrow = Val: , Int:  0 , digx = Val:  4 , Int:  4 , digy = Val:  0 , Int:  0 , dd = Val:  4 , Int:  4
res = dd | res
res = Val:  4 , Int:  4
while y != O:
digx = x[O]
digx = Val:  3 , Int:  3
digy = y[O]
digy = Val:  0 , Int:  0
x = x.drop()
x = Val:  1 2 , Int:  1 2
y = y.drop()
y = Val:  1 2 , Int:  1 2
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  3 , Int:  3 , y = Val:  0 , Int:  0
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  1 2 , Int:  1 2 , y = Val:  1 2 , Int:  1 2 , res = Val:  4 , Int:  4 , borrow = Val: , Int:  0 , digx = Val:  3 , Int:  3 , digy = Val:  0 , Int:  0 , dd = Val:  3 , Int:  3
res = dd | res
res = Val:  3 4 , Int:  3 4
while y != O:
digx = x[O]
digx = Val:  2 , Int:  2
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  1 , Int:  1
y = y.drop()
y = Val:  1 , Int:  1
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  2 , Int:  2 , y = Val:  2 , Int:  2
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val:  3 4 , Int:  3 4 , borrow = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , dd = Val:  0 , Int:  0
res = dd | res
res = Val:  0 3 4 , Int:  3 4
while y != O:
digx = x[O]
digx = Val:  1 , Int:  1
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val: , Int:  0 , y = Val: , Int:  0 , res = Val:  0 3 4 , Int:  3 4 , borrow = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , dd = Val:  0 , Int:  0
res = dd | res
res = Val:  0 0 3 4 , Int:  3 4
while y != O:
while borrow != O:
res = x | res
res = Val:  0 0 3 4 , Int:  3 4
return res
return res
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  2 , Int:  2 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
while x >= y:
factor_mag = O
factor_mag = Val: , Int:  0
while (y << factor_mag) <= x:
factor_mag = factor_mag + I
x = Val: , Int:  0 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  1 , Int:  1 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
while (y << factor_mag) <= x:
factor_mag = factor_mag - I
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  0 , Int:  0 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
dig = I
dig = Val:  1 , Int:  1
sum_div = y
sum_div = Val:  1 2 , Int:  1 2
while (sum_div + y) << factor_mag <= x:
x = Val:  1 2 , Int:  1 2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  2 , Int:  2
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  1 , Int:  1
y = y.drop()
y = Val:  1 , Int:  1
ds = digx + digy
x = Val:  2 , Int:  2 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
ds = ds + carry
x = Val:  4 , Int:  4 , y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
res = ds[O] | res
res = Val:  4 , Int:  4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  1 , Int:  1
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , y = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
ds = ds + carry
x = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
res = ds[O] | res
res = Val:  2 4 , Int:  2 4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  2 4 , Int:  2 4
return res
return res
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  0 , Int:  0 , dig = Val:  1 , Int:  1 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
dig = dig + I
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  0 , Int:  0 , dig = Val:  2 , Int:  2 , sum_div = Val:  1 2 , Int:  1 2 , factor = Val:  1 0 0 , Int:  1 0 0
sum_div = sum_div + y
x = Val:  1 2 , Int:  1 2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  2 , Int:  2
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  1 , Int:  1
y = y.drop()
y = Val:  1 , Int:  1
ds = digx + digy
x = Val:  2 , Int:  2 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
ds = ds + carry
x = Val:  4 , Int:  4 , y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  2 , Int:  2 , ds = Val:  4 , Int:  4
res = ds[O] | res
res = Val:  4 , Int:  4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  1 , Int:  1
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  1 , Int:  1 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , y = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
ds = ds + carry
x = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  4 , Int:  4 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val:  1 , Int:  1 , ds = Val:  2 , Int:  2
res = ds[O] | res
res = Val:  2 4 , Int:  2 4
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  2 4 , Int:  2 4
return res
return res
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  0 , Int:  0 , dig = Val:  2 , Int:  2 , sum_div = Val:  2 4 , Int:  2 4 , factor = Val:  1 0 0 , Int:  1 0 0
while (sum_div + y) << factor_mag <= x:
x = Val:  2 4 , Int:  2 4
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  4 , Int:  4
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  2 , Int:  2
y = y.drop()
y = Val:  1 , Int:  1
ds = digx + digy
x = Val:  4 , Int:  4 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  2 , Int:  2 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  4 , Int:  4 , digy = Val:  2 , Int:  2 , ds = Val:  6 , Int:  6
ds = ds + carry
x = Val:  6 , Int:  6 , y = Val: , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  2 , Int:  2 , y = Val:  1 , Int:  1 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  4 , Int:  4 , digy = Val:  2 , Int:  2 , ds = Val:  6 , Int:  6
res = ds[O] | res
res = Val:  6 , Int:  6
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  2 , Int:  2
digy = y[O]
digy = Val:  1 , Int:  1
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  2 , Int:  2 , y = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , y = Val: , Int:  0 , res = Val:  6 , Int:  6 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  1 , Int:  1 , ds = Val:  3 , Int:  3
ds = ds + carry
x = Val:  3 , Int:  3
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  6 , Int:  6 , carry = Val: , Int:  0 , digx = Val:  2 , Int:  2 , digy = Val:  1 , Int:  1 , ds = Val:  3 , Int:  3
res = ds[O] | res
res = Val:  3 6 , Int:  3 6
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  3 6 , Int:  3 6
return res
return res
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 0 , Int:  1 0 0 , factor_mag = Val:  0 , Int:  0 , dig = Val:  2 , Int:  2 , sum_div = Val:  2 4 , Int:  2 4 , factor = Val:  1 0 0 , Int:  1 0 0
factor = dig << factor_mag
factor = Val:  2 , Int:  2
res = res + factor
x = Val:  1 0 0 , Int:  1 0 0 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
res = copy(O)
res = Val: , Int:  0
carry = copy(O)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  0 , Int:  0
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  1 0 , Int:  1 0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  0 , Int:  0 , y = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 0 , Int:  1 0 , y = Val: , Int:  0 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  0 , Int:  0 , digy = Val:  2 , Int:  2 , ds = Val:  2 , Int:  2
ds = ds + carry
x = Val:  2 , Int:  2
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 0 , Int:  1 0 , res = Val: , Int:  0 , carry = Val: , Int:  0 , digx = Val:  0 , Int:  0 , digy = Val:  2 , Int:  2 , ds = Val:  2 , Int:  2
res = ds[O] | res
res = Val:  2 , Int:  2
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  0 , Int:  0
digy = y[O]
digy = Val: , Int:  0
x = x.drop()
x = Val:  1 , Int:  1
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  0 , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , res = Val:  2 , Int:  2 , carry = Val: , Int:  0 , digx = Val:  0 , Int:  0 , digy = Val: , Int:  0 , ds = Val:  0 , Int:  0
ds = ds + carry
x = Val:  0 , Int:  0
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val:  1 , Int:  1 , res = Val:  2 , Int:  2 , carry = Val: , Int:  0 , digx = Val:  0 , Int:  0 , digy = Val: , Int:  0 , ds = Val:  0 , Int:  0
res = ds[O] | res
res = Val:  0 2 , Int:  2
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
digx = x[O]
digx = Val:  1 , Int:  1
digy = y[O]
digy = Val: , Int:  0
x = x.drop()
x = Val: , Int:  0
y = y.drop()
y = Val: , Int:  0
ds = digx + digy
x = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  0 2 , Int:  2 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val: , Int:  0 , ds = Val:  1 , Int:  1
ds = ds + carry
x = Val:  1 , Int:  1
def __add__(x, y, vis=True):
if x.len() <= I and y.len() <= I:
return x.__add(y)
return x.__add(y)
x = Val: , Int:  0 , res = Val:  0 2 , Int:  2 , carry = Val: , Int:  0 , digx = Val:  1 , Int:  1 , digy = Val: , Int:  0 , ds = Val:  1 , Int:  1
res = ds[O] | res
res = Val:  1 0 2 , Int:  1 0 2
carry = copy(O) if ds.len() <= I else copy(I)
carry = Val: , Int:  0
while x != O or y != O:
res = carry | res
res = Val:  1 0 2 , Int:  1 0 2
return res
return res
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  1 2 , Int:  1 2 , factor_mag = Val:  0 , Int:  0 , dig = Val:  2 , Int:  2 , sum_div = Val:  2 4 , Int:  2 4 , factor = Val:  2 , Int:  2
x = x - (sum_div << factor_mag)
x = Val:  0 0 3 4 , Int:  3 4 , y = Val:  2 4 , Int:  2 4
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
res = copy(O)
res = Val: , Int:  0
borrow = copy(O)
borrow = Val: , Int:  0
while y != O:
digx = x[O]
digx = Val:  4 , Int:  4
digy = y[O]
digy = Val:  4 , Int:  4
x = x.drop()
x = Val:  0 0 3 , Int:  3
y = y.drop()
y = Val:  2 , Int:  2
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  4 , Int:  4 , y = Val:  4 , Int:  4
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  0 0 3 , Int:  3 , y = Val:  2 , Int:  2 , res = Val: , Int:  0 , borrow = Val: , Int:  0 , digx = Val:  4 , Int:  4 , digy = Val:  4 , Int:  4 , dd = Val:  0 , Int:  0
res = dd | res
res = Val:  0 , Int:  0
while y != O:
digx = x[O]
digx = Val:  3 , Int:  3
digy = y[O]
digy = Val:  2 , Int:  2
x = x.drop()
x = Val:  0 0 , Int:  0
y = y.drop()
y = Val: , Int:  0
if borrow > O:
if digx < digy:
dd = digx - digy
x = Val:  3 , Int:  3 , y = Val:  2 , Int:  2
def __sub__(x, y, vis = True):
assert x >= y
if x <= TInt( 1 8 ) and y <= TInt( 1 8 ):
return x.__sub(y)
return x.__sub(y)
x = Val:  0 0 , Int:  0 , y = Val: , Int:  0 , res = Val:  0 , Int:  0 , borrow = Val: , Int:  0 , digx = Val:  3 , Int:  3 , digy = Val:  2 , Int:  2 , dd = Val:  1 , Int:  1
res = dd | res
res = Val:  1 0 , Int:  1 0
while y != O:
while borrow != O:
res = x | res
res = Val:  0 0 1 0 , Int:  1 0
return res
return res
x = Val:  0 0 1 0 , Int:  1 0 , y = Val:  1 2 , Int:  1 2 , res = Val:  1 0 2 , Int:  1 0 2 , factor_mag = Val:  0 , Int:  0 , dig = Val:  2 , Int:  2 , sum_div = Val:  2 4 , Int:  2 4 , factor = Val:  2 , Int:  2
while x >= y:
return res
return res
ANSWER: Val:  1 0 2 , Int:  1 0 2
