 --- modulename: test, funcname: <module>
<string>(1):  --- modulename: primitive_ops, funcname: compute
primitive_ops.py(85):         assert(isinstance(x.val, TInt) and isinstance(y.val, TInt))
primitive_ops.py(86):         trace = f"{output_name} = {x} + {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(87):         max_len = max(len(x.val.val), len(y.val.val))
primitive_ops.py(89):         res, t = TSetVar().compute("res", TInt(''))
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(24):         elif isinstance(val, str):
primitive_types.py(25):             assert(len(val) == 0)
primitive_types.py(26):             self.val = ''
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(90):         trace += t
primitive_ops.py(91):         carry, t = TSetVar().compute("carry", TDigit(0))
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(92):         trace += t
primitive_ops.py(94):         for i in range(max_len):
primitive_ops.py(95):             index, t = TSetVar().compute('i', TInt(i))
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(96):             trace += t
primitive_ops.py(97):             digit_one, t = TRIndex().compute(x, index, "digit_one")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(98):             trace += t
primitive_ops.py(99):             digit_two, t = TRIndex().compute(y, index, "digit_two")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(100):             trace += t
primitive_ops.py(102):             digit_res, t = TSimpleAdd().compute(digit_one, digit_two, "digit_res")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(8):         super(TSimpleAdd, self).__init__("SimpleAdd")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(11):         assert(isinstance(x.val, TDigit))
primitive_ops.py(12):         assert(isinstance(y.val, TDigit))
primitive_ops.py(13):         trace = f"{output_name} = {x} + {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(14):         answer = TInt(int(x.compute()) + int(y.compute()))
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(15):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(16):         trace += t
primitive_ops.py(17):         return answer, trace
primitive_ops.py(103):             trace += t
primitive_ops.py(105):             cur_digit, t = TRIndex().compute(digit_res, TVar(val=TInt(0)), "cur_digit")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(106):             trace += t
primitive_ops.py(107):             cur_digit, t = TSimpleAdd().compute(cur_digit, carry, "cur_digit")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(8):         super(TSimpleAdd, self).__init__("SimpleAdd")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(11):         assert(isinstance(x.val, TDigit))
primitive_ops.py(12):         assert(isinstance(y.val, TDigit))
primitive_ops.py(13):         trace = f"{output_name} = {x} + {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(14):         answer = TInt(int(x.compute()) + int(y.compute()))
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(15):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(16):         trace += t
primitive_ops.py(17):         return answer, trace
primitive_ops.py(108):             trace += t
primitive_ops.py(110):             carry, t = TRIndex().compute(digit_res, TVar(val=TInt(1)), "carry")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(111):             trace += t
primitive_ops.py(112):             res, t = TConcat().compute(cur_digit, res, "res")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(62):         super(TConcat, self).__init__("Concat")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(65):         assert(isinstance(x, TVar))
primitive_ops.py(66):         assert(isinstance(y, TVar))
primitive_ops.py(67):         trace = f"{output_name} = {x} ++ {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(68):         answer = TInt(int(x.val.val + y.val.val))
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(69):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(70):         trace += t
primitive_ops.py(71):         return answer, trace
primitive_ops.py(113):             trace += t
primitive_ops.py(94):         for i in range(max_len):
primitive_ops.py(95):             index, t = TSetVar().compute('i', TInt(i))
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(96):             trace += t
primitive_ops.py(97):             digit_one, t = TRIndex().compute(x, index, "digit_one")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(98):             trace += t
primitive_ops.py(99):             digit_two, t = TRIndex().compute(y, index, "digit_two")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(100):             trace += t
primitive_ops.py(102):             digit_res, t = TSimpleAdd().compute(digit_one, digit_two, "digit_res")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(8):         super(TSimpleAdd, self).__init__("SimpleAdd")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(11):         assert(isinstance(x.val, TDigit))
primitive_ops.py(12):         assert(isinstance(y.val, TDigit))
primitive_ops.py(13):         trace = f"{output_name} = {x} + {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(14):         answer = TInt(int(x.compute()) + int(y.compute()))
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(15):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(16):         trace += t
primitive_ops.py(17):         return answer, trace
primitive_ops.py(103):             trace += t
primitive_ops.py(105):             cur_digit, t = TRIndex().compute(digit_res, TVar(val=TInt(0)), "cur_digit")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(106):             trace += t
primitive_ops.py(107):             cur_digit, t = TSimpleAdd().compute(cur_digit, carry, "cur_digit")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(8):         super(TSimpleAdd, self).__init__("SimpleAdd")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(11):         assert(isinstance(x.val, TDigit))
primitive_ops.py(12):         assert(isinstance(y.val, TDigit))
primitive_ops.py(13):         trace = f"{output_name} = {x} + {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(14):         answer = TInt(int(x.compute()) + int(y.compute()))
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: compute
primitive_types.py(51):         return self.val.val
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(15):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(16):         trace += t
primitive_ops.py(17):         return answer, trace
primitive_ops.py(108):             trace += t
primitive_ops.py(110):             carry, t = TRIndex().compute(digit_res, TVar(val=TInt(1)), "carry")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(21):         super(TRIndex, self).__init__("RIndex")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(24):         assert(isinstance(x, TVar) and isinstance(x.val, TInt))
primitive_ops.py(25):         assert(isinstance(y, TVar) and isinstance(y.val, TInt))
primitive_ops.py(26):         assert(x.val is not None and y.val is not None)
primitive_ops.py(27):         trace = f"{output_name} = {x} [ {y} ]\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(28):         x = x.val
primitive_ops.py(29):         y = y.val
primitive_ops.py(30):         len_x = len(x.val)
primitive_ops.py(31):         if int(y.val) > len_x - 1: answer = TDigit(0)
primitive_ops.py(33):             index = len_x - int(y.val) - 1
primitive_ops.py(34):             answer = TDigit(x.val[index])
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(10):         if int(val) not in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]:
primitive_types.py(12):         self.val = str(val)
primitive_ops.py(35):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(15):         return self.val
primitive_ops.py(36):         trace += t
primitive_ops.py(37):         return answer, trace
primitive_ops.py(111):             trace += t
primitive_ops.py(112):             res, t = TConcat().compute(cur_digit, res, "res")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(62):         super(TConcat, self).__init__("Concat")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(65):         assert(isinstance(x, TVar))
primitive_ops.py(66):         assert(isinstance(y, TVar))
primitive_ops.py(67):         trace = f"{output_name} = {x} ++ {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(68):         answer = TInt(int(x.val.val + y.val.val))
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(69):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(70):         trace += t
primitive_ops.py(71):         return answer, trace
primitive_ops.py(113):             trace += t
primitive_ops.py(94):         for i in range(max_len):
primitive_ops.py(115):         res, t = TConcat().compute(carry, res, "res")
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(62):         super(TConcat, self).__init__("Concat")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(65):         assert(isinstance(x, TVar))
primitive_ops.py(66):         assert(isinstance(y, TVar))
primitive_ops.py(67):         trace = f"{output_name} = {x} ++ {y}\n"
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(48):         return str(self.name)
primitive_ops.py(68):         answer = TInt(int(x.val.val + y.val.val))
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(22):         if isinstance(val, int) and val >= 0:
primitive_types.py(23):             self.val = str(val)
primitive_ops.py(69):         answer, t = TSetVar().compute(output_name, answer)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(70):         trace += t
primitive_ops.py(71):         return answer, trace
primitive_ops.py(116):         trace += t
primitive_ops.py(118):         res, t = TSetVar().compute(output_name, res.val)
 --- modulename: primitive_ops, funcname: __init__
primitive_ops.py(75):         super(TSetVar, self).__init__("SetVarFunction")
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(64):         self.name = name
 --- modulename: primitive_ops, funcname: compute
primitive_ops.py(78):         return TVar(var, val), f"{var} = {val}\n" 
 --- modulename: primitive_types, funcname: __init__
primitive_types.py(43):         self.name = name if name is not None else str(val)
primitive_types.py(44):         assert(type(val) in [TInt, TDigit, TLanguageError])
primitive_types.py(45):         self.val = val
 --- modulename: primitive_types, funcname: __repr__
primitive_types.py(29):         return " ".join(self.val)
primitive_ops.py(119):         trace += t
primitive_ops.py(121):         return res, trace
